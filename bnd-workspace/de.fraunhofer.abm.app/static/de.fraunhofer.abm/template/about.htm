<section class="col-md-6 col-md-offset-3 aboutText">
	<p>The ABM web application allows researchers and practitioners to automatically create corpora to test software tools and analyses.
		It crawls open-source platforms, collects projects following user-specified filters, and builds the projects.
		It can upload the resulting collection on Zenodo, which provides a DOI to reference it.</p>
	<p>The collections generated with ABM contain buildable, real-world, open-source projects.
		They contain both the executables and the source code of the projects.</p>
	<p class="highlight">The source code of each project should contain the licence information
		under which the project is released. If not, please refer to the corresponding GitHub webpage.</p>

	<h2>Supported open-source platforms:</h2>
	<ul>
		<li>Github</li>
		<li>Maven</li>
		<li>BitBucket</li>
	</ul>

	<h2>How can I create a collection?</h2>
	<p>Log in and start searching for the projects you want in your collection!</p>

	<span class="hidden">
		<h2>How can I download a collection?</h2>
		<p>Collections that are made public by their owners are published on <a href="https://zenodo.org">Zenodo</a>.
			If you have the DOI, you can search for it directly on Zenodo.</p>
		<p>Alternatively, you can also browse collections on the <a href="#/">Collections</a> page.</p>
	</span>

	<h2>Why was ABM created?</h2>
	<p>The ABM is a methodology designed to make benchmark creation and maintenance easier. By
	   creating this methodology, we wish to address the following concerns:</p>
	<ul>
		<li>Outdated benchmark suites: Well-established benchmark suites are often created by hand,
            and remain unchanged for years. As a result, analyses and tools are tested on outdated code,
            which is not representative of real-world software. By automatically constructing the
            collection, the code base can be regularly updated to provide up-to-date test projects.</li>
		<li>Analysis/tool scope: Benchmark suites are very general, and aim to cover many different
            types of software. On the other hand, analyses and tools are sometimes targeted at specific
            programs, such as Java web applications for example. Evaluating them on other types of
            software is insubstantial. When mining GitHub, the scope of the collection can be restricted
            to the target of the analysis/tool, and provide an adapted, yet still representative collection
            of up-to-date applications. The current collection targets Java web applications, and the
            same automated mining methodology can be applied to different types of target programs.</li>
	</ul>
	<p>For comparison and replication purposes, old versions of the collections are archived.</p>


	<h2>Can I contribute?</h2>
	<p>With the ABM methodology, we strive to create more dynamic, easily updatable benchmark suites
       that are adapted to the needs of different target domains. The overhead of this semi-automated
       methodology is the manual creation of the different filters, which are written on top of the
       <a href="http://www.opal-project.de/Hermes.html">Hermes</a> framework. We are always happy to
       add new filters. To submit your own Hermes filters, please contact us by email.</p>

			 <p>Alongside, our open-source git repository can be found <a href="https://github.com/ABenchM/abm">
				 here.</a> Contributions are welcomed!</p>

	<h2>Publications</h2>
	<p>Lisa Nguyen Quang Do, Michael Eichberg, and Eric Bodden. 2016. Toward an automated benchmark
       management system. In <i>​Proceedings of the 5th ACM SIGPLAN International Workshop on State Of the
       Art in Program Analysis​</i> (SOAP 2016). ACM, New York, NY, USA, 13-17. DOI:
       <a href="http://dx.doi.org/10.1145/2931021.2931023">http://dx.doi.org/10.1145/2931021.2931023</a></p>

	 <p>Michael Reif, Michael Eichberg, Ben Hermann, Mira Mezini. 2017. Hermes: assessment and creation of effective test corpora
 In <i>​Proceedings of the 6th ACM SIGPLAN International Workshop on State Of the
        Art in Program Analysis​</i> (SOAP 2016). ACM, New York, NY, USA, 43-48. DOI:
        <a href="https://doi.org/10.1145/3088515.3088523">https://doi.org/10.1145/3088515.3088523</a></p>


	<h2>Collection : Java business web applications</h2>
	<p>The first collection created for ABM can be found on the
	   <a href="http://www.st.informatik.tu-darmstadt.de/artifacts/webapps/">​old webpage</a>​.
	   It was created on February 16th, 2016, contains 139 projects, and 100 executables.

    <h2>Contact information</h2>
    <p>Lisa Nguyen Quang Do (<a href="mailto:lisa.nguyen@iem.fraunhofer.de">lisa.nguyen@iem.fraunhofer.de</a>)<br />
	Ben Hermann(<a href="mailto:ben.hermann@uni-paderborn.de">ben.hermann@uni-paderborn.de</a>)<br />
	Michael Eichberg (<a href="mailto:eichberg@informatik.tu-darmstadt.de">eichberg@informatik.tu-darmstadt.de</a>)<br />
	Eric Bodden (<a href="mailto:eric.bodden@upb.de">eric.bodden@upb.de</a>)</p>

    <h2>Acknowledgements</h2>
    <p>We would like to thank the following contributors:</p>
    <ul>
    	<li>Henrik Niehaus</li>
	<li>Swapnil Shah</li>
	<li>Alexander Li</li>
	<li>Tyler Pavlovic</li>	    
    </ul>
</section>
